using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Text.Encodings.Web;
using System.Text.Json;
using Microsoft.Extensions.Logging;
using PA193_Project.CommandLine;
using PA193_Project.Entities;
using PA193_Project.Modules;
using PA193_Project.Services;

namespace PA193_Project
{
    class EntryPoint
    {
        private readonly IParserService _parserService;
        private readonly ILogger<EntryPoint> _logger;

        public EntryPoint(IParserService parserService, ILogger<EntryPoint> logger)
        {
            this._parserService = parserService;
            this._logger = logger;
        }

        public void PrintFile(string json, string filename,string dir="")
        {
            dir = dir is null ? "" : dir;
            json = json.Replace("\u002B", "+");
            try
            {
                if (dir != "") Directory.CreateDirectory(dir);
                using (StreamWriter writer = new StreamWriter(Path.Combine(dir, filename + ".json")))
                {

                    writer.Write(json);
                }
            }
            catch (IOException e)
            {
                Console.WriteLine(e.Message);
            }
            
        }

        public void Run(String[] args)
        {
            // Set up global exception handler
            AppDomain.CurrentDomain.UnhandledException += UnhandledExceptionTrap;

            // Set up CLI options
            CommandLineOptions commandLineOptions = new CommandLineOptions();
            commandLineOptions.AddOption(new CommandLineOption("h", CommandLineOptionType.Switch, "Print this help"));
            commandLineOptions.AddOption(new CommandLineOption("v", CommandLineOptionType.Switch, "Print version info"));
            commandLineOptions.AddOption(new CommandLineOption("output", CommandLineOptionType.Option, "Output JSON file, \"<textfile>.json\" by default"));
            commandLineOptions.AddOption(new CommandLineOption("arg", CommandLineOptionType.Argument, "A text file of the certificate generated by pdftotext"));
            commandLineOptions.AddOption(new CommandLineOption("title", CommandLineOptionType.Switch, "Pretty print title"));
            commandLineOptions.AddOption(new CommandLineOption("toc", CommandLineOptionType.Switch, "Pretty print ToC"));
            commandLineOptions.AddOption(new CommandLineOption("versions", CommandLineOptionType.Switch, "Pretty print versions"));



            try
            {
                ParsedOptions parseResults = commandLineOptions.Parse(args);

                if (parseResults.IsEmpty()) { Console.WriteLine(commandLineOptions.GetHelp()); Environment.Exit(0); }

                string filepath = parseResults.Get<List<string>>("arg")[0]; // TODO process multiple
                string output = parseResults.Get<string>("output");
                bool help = parseResults.Get<bool>("h");
                bool version = parseResults.Get<bool>("v");

                if (help) { Console.WriteLine(commandLineOptions.GetHelp()); Environment.Exit(0); }
                if (version) { Console.WriteLine("0.1"); Environment.Exit(0); }


                _logger.LogDebug($"Filepath: {filepath}");
                _logger.LogDebug($"Output: {output}");


                _parserService.RegisterModule(new HeaderFooterModule());
                _parserService.RegisterModule(new TitleModule());
                _parserService.RegisterModule(new TOCModule());
                _parserService.RegisterModule(new VersionsModule());

                _logger.LogDebug($"{filepath} -[ all ]-> {output}");
                Document document = new Document
                {
                    Filepath = filepath
                };

                _logger.LogDebug($"Generated {document.Indices.Count} indices");

                var results = _parserService.Parse(document);

                JsonSerializerOptions serializerOptions = new JsonSerializerOptions
                {
                    IgnoreNullValues = false,
                    //PropertyNamingPolicy = JsonNamingPolicy.CamelCase,
                    //Encoder = JavaScriptEncoder.UnsafeRelaxedJsonEscaping
                };
                //Console.WriteLine(results.Title);

                //Console.WriteLine(JsonSerializer.Serialize(results, serializerOptions));
                PrintFile(JsonSerializer.Serialize(results, serializerOptions), Path.GetFileNameWithoutExtension(filepath), output);
                foreach (var arg in args)
                {
                 
                    switch (arg)
                    {
                        case "-title":
                            Console.WriteLine("Title:");
                            Console.WriteLine(results.title);
                            break;
                        case "-toc":
                            Console.WriteLine("Table of contents:");
                            foreach (var entry in results.table_of_contents)
                                Console.WriteLine(entry[0]+ " "+entry[1]+", " +entry[2]);
                            break;
                        case "-versions":
                            Console.WriteLine("Versions:");
                            foreach (var k in results.versions.Keys)
                            {
                                Console.Write(k+": [");
                                List<string> versions = new List<string>();
                                foreach (var v in results.versions[k])
                                {
                                    versions.Add(v);
                                }
                                Console.Write((String.Join(", ", versions)));
                                Console.WriteLine("]");
                            }
                            break;
                         default:
                            break;
                            
                    }


                }
            }
            catch (ArgumentException ex)
            {
                Console.WriteLine(ex.Message);
                Console.WriteLine(commandLineOptions.GetHelp());
            }
        }

        private void UnhandledExceptionTrap(object sender, UnhandledExceptionEventArgs unhandledExceptionEventArgs)
        {
            _logger.LogError(unhandledExceptionEventArgs.ExceptionObject.ToString());
            Environment.Exit(1);
        }
    }
}
