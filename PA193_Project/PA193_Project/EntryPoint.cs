using System;
using System.Text.Json;
using Microsoft.Extensions.CommandLineUtils;
using Microsoft.Extensions.Logging;
using PA193_Project.Entities;
using PA193_Project.Modules;
using PA193_Project.Services;

namespace PA193_Project
{
    class EntryPoint
    {
        private readonly IParserService _parserService;
        private readonly ILogger<EntryPoint> _logger;

        public EntryPoint(IParserService parserService, ILogger<EntryPoint> logger)
        {
            this._parserService = parserService;
            this._logger = logger;
        }

        public void Run(String[] args)
        {
            // Set up global exception handler
            AppDomain.CurrentDomain.UnhandledException += UnhandledExceptionTrap;

            // Set up CLI options
            var cliApplication = new CommandLineApplication(throwOnUnexpectedArg: false)
            {
                Name = "CertParser",
                FullName = "PA193 Certificate Parser",
                Description = "Security certitificate parser and attribute extractor"
            };

            cliApplication.HelpOption("-?|-h|--help");
            cliApplication.VersionOption("--version", "0.1");

            cliApplication.Command("all", command =>
            {
                command.Description = "Run all extraction modules";
                command.HelpOption("-?|-h|--help");

                var filepathArg = command.Argument("<textfile>", "A text file of the certificate generated by pdftotext");
                var outputOption = command.Option("-o|--output <output>", "Output JSON file, \"<textfile>.json\" by default", CommandOptionType.SingleValue);

                command.OnExecute(() =>
                {
                    var filepath = filepathArg.Value;
                    var output = outputOption.Value();

                    _logger.LogDebug($"{filepath} -[ all ]-> {output}");
                    Document document = new Document
                    {
                        Filepath = filepath
                    };

                    _parserService.RegisterModule(new TitleModule());
                    var results = _parserService.Parse(document);

                    JsonSerializerOptions serializerOptions = new JsonSerializerOptions
                    {
                        IgnoreNullValues = true
                    };
                    _logger.LogDebug(JsonSerializer.Serialize(results, serializerOptions));

                    return 0;
                });
            });

            cliApplication.OnExecute(() =>
            {
                cliApplication.ShowHelp();
                return 0;
            });

            try
            {
                cliApplication.Execute(args);
            }
            catch (CommandParsingException ex)
            {
                Console.WriteLine(ex.Message);
                cliApplication.ShowHelp();
            }

        }

        private void UnhandledExceptionTrap(object sender, UnhandledExceptionEventArgs unhandledExceptionEventArgs)
        {
            _logger.LogError(unhandledExceptionEventArgs.ExceptionObject.ToString());
            Environment.Exit(1);
        }
    }
}
